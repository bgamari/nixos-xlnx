{ config, pkgs, lib, modulesPath, ... }:

let
  boot-bin = pkgs.boot-bin-xlnx.override {
    inherit (config.boot-bin-xlnx) bitstream fsbl pmufw;
  };
in

{
  options.boot-bin-xlnx = {
    bitstream = lib.mkOption {
      type = lib.types.path;
      example = lib.literalExpression "./firmware/system.bit";
      description = lib.mdDoc ''
        Path to system.bit generated by Vitis.
        Can also be generated using ./xsa2fw <vivado_exported.xsa>
      '';
    };
    fsbl = lib.mkOption {
      type = lib.types.path;
      example = lib.literalExpression "./firmware/zynqmp_fsbl.elf";
      description = lib.mdDoc ''
        Path to zynqmp_fsbl.elf generated by Vitis.
        Can also be generated using ./xsa2fw <vivado_exported.xsa>
      '';
    };
    pmufw = lib.mkOption {
      type = lib.types.path;
      example = lib.literalExpression "./firmware/pmufw.elf";
      description = lib.mdDoc ''
        Path to pmufw.elf generated by Vitis.
        Can also be generated using ./xsa2fw <vivado_exported.xsa>
      '';
    };
  };

  imports = [
    "${modulesPath}/profiles/base.nix"
    "${modulesPath}/installer/sd-card/sd-image.nix"
    ./nixos.nix
  ];

  config = {
    sdImage = {
      # Depending on the FSBL setup, BOOT.BIN can be quite large
      firmwareSize = 100;
      populateFirmwareCommands = ''
        cp ${boot-bin}/BOOT.BIN firmware/
      '';
      populateRootCommands = ''
        mkdir -p ./files/boot
        ${config.boot.loader.generic-extlinux-compatible.populateCmd} -c ${config.system.build.toplevel} -d ./files/boot
      '';
    };

    environment.systemPackages = [
      (pkgs.writeShellApplication {
        name = "xlnx-firmware-update";
        text = ''
          cp ${boot-bin}/BOOT.BIN /boot/firmware/
        '';
      })
    ];
  };
}
